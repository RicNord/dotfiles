# shellcheck shell=bash

function cdf() {
    SEARCH_BASE="${1:-$HOME}"
    pushd "$SEARCH_BASE" >/dev/null || return

    NEW_DIR="$(find . -type d -print0 \
        | fzf --tmux --read0 --preview="tree -L 1 {}" --bind="alt-space:toggle-preview" --preview-window=:hidden)"

    if [ -n "$NEW_DIR" ]; then
        cd "$NEW_DIR" && return
    fi

    popd >/dev/null || return
}

function openf() {
    find . -type f -print0 \
        | fzf -m --read0 --print0 --preview="less {}" \
        | xargs -ro -0 xdg-open 2>&-
}

function pacs() {
    _PACS="$(pacman -Ssq \
        | fzf --multi --preview="pacman -Si {}" --bind="alt-space:toggle-preview" --preview-window=:hidden)"
    if [ -n "$_PACS" ]; then
        sudo pacman -S $_PACS
    fi
}

function pyv() {
    if [ -f "venv/bin/activate" ]; then
        echo "Activating virtual environment from venv/bin/activate"
        source venv/bin/activate
        return
    elif [ -f ".venv/bin/activate" ]; then
        echo "Activating virtual environment from .venv/bin/activate"
        source .venv/bin/activate
        return
    else
        echo "No virtual environment found in dir venv or .venv"
    fi
}

function nown() {
    nohup "$1" >/dev/null 2>&1 &
    NOHUP_TEMP_PID=$!
    disown $NOHUP_TEMP_PID
    unset NOHUP_TEMP_PID
}

function light_inc() {
    light -A 10
}

function light_dec() {
    light -U 10
}

function cdr() {
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        cd "$(git rev-parse --show-toplevel)" || return
    else
        printf "Not in Git dir\n"
    fi
}

# bash parameter completion for the dotnet CLI
function _dotnet_bash_complete() {
    local cur="${COMP_WORDS[COMP_CWORD]}" IFS=$'\n' # On Windows you may need to use use IFS=$'\r\n'
    local candidates

    read -d '' -ra candidates < <(dotnet complete --position "${COMP_POINT}" "${COMP_LINE}" 2>/dev/null)

    read -d '' -ra COMPREPLY < <(compgen -W "${candidates[*]:-}" -- "$cur")
}

complete -f -F _dotnet_bash_complete dotnet
